version: 1.6.4-{build}
image: Visual Studio 2017

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\tools\\appveyor\\run_with_env.cmd"
    # END TO END TEST VARIABLES
    POSTGIS_USER: "postgres"
    POSTGIS_PASS: "mysecretpassword"
    POSTGIS_PORT: "5435"
    POSTGIS_DB: "tds_tests"
    POSTGIS_URL: "postgresql://%POSTGIS_USER%:%POSTGIS_PASS%@172.17.0.1:%POSTGIS_PORT%/%POSTGIS_DB%"
    POSTGIS_PUBLIC_URL: "postgresql://%POSTGIS_USER%:%POSTGIS_PASS%@127.0.0.1:%POSTGIS_PORT%/%POSTGIS_DB%"
    GEOSERVER_ENDPOINT: "http://127.0.0.1:8181/geoserver/rest/"
    GEOSERVER_USERNAME: "admin"
    GEOSERVER_PASSWORD: "geoserver"

  matrix:
#    - PYTHON: "C:\\Miniconda36-x64"
#      PYTHON_VERSION: "3.6"
#      PYTHON_ARCH: "64"
#
#    - PYTHON: "C:\\Miniconda-x64"
#      PYTHON_VERSION: "2.7"
#      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      RUN_GEOSERVER_E2E_TESTS: "TRUE"

init:
  - ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH% %HOME%

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }
  # these correspond to folder naming of miniconda installs on appveyor.  See
  # https://www.appveyor.com/docs/installed-software#python
  - if "%PYTHON_VERSION%" == "3.6" set "BASE_PYTHON_VERSION=36"
  - if "%PYTHON_ARCH%" == "64" set "ARCH_LABEL=-x64"
  # These are already installed on appveyor.  Update them.
  - set "CONDA_ROOT=C:\Miniconda%BASE_PYTHON_VERSION%%ARCH_LABEL%"
  - set "PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%CONDA_ROOT%\Library\bin;%PATH%"
  - conda config --set always_yes yes
  - conda update -q conda
  - conda config --set auto_update_conda no
  - conda info
  - python -c "import sys; print(sys.version)"
  - python -c "import sys; print(sys.executable)"
  - python -c "import sys; print(sys.prefix)"
  - conda update -q --all
  - conda install -q pip flake8 mock requests
  # this is to ensure dependencies
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"
  - if "%PYTHON_VERSION%" == "3.6" pip install -r requirements-py3.txt
  - if "%PYTHON_VERSION%" == "2.7" pip install -r requirements-py2.txt
  - set PATH
  # Start docker containers
  - pip install --no-deps .
  - if "%RUN_GEOSERVER_E2E_TESTS%" == "TRUE" (docker version)
  - if "%RUN_GEOSERVER_E2E_TESTS%" == "TRUE" (CALL .\appveyor\setup_geoserver_e2e.bat)
  - docker ps -a

# Not a .NET project, we build package in the install step instead
build: false

# cache:
#   - C:\\Miniconda3-x64 -> appveyor.yml
#   - C:\\Miniconda36-x64 -> appveyor.yml
#   - C:\\Miniconda-x64 -> appveyor.yml
#   - C:\\Miniconda -> appveyor.yml

test_script:
  - set "PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%CONDA_ROOT%\Library\bin;%PATH%"
  - set PATH
  - mkdir C:\cbtmp
  # unset other language env vars - we only want to test if conda-build sets them itself
  - set PERL=
  - set PYTHON=
  - set LUA=
  - set R=
  # cache several files to avoid race condition errors
  - echo "safety_checks: disabled" >> ~/.condarc
  - echo "local_repodata_ttl: 1800" >> ~/.condarc
  # Run unit tests
  - coverage run --rcfile=coverage.ini setup.py test -s tethys_dataset_services.tests.unit_tests
  - coverage report -m
